import React, { useRef, useEffect, useState } from 'react';
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Camera, CameraOff, AlertTriangle, CheckCircle, Video, VideoOff } from "lucide-react";
import { Alert, AlertDescription } from "@/components/ui/alert";

export default function LiveCameraFeed({ 
  onDetectionResult,
  isDetecting,
  detectionResult,
  cameraLocation 
}) {
  const videoRef = useRef(null);
  const canvasRef = useRef(null);
  const [isStreaming, setIsStreaming] = useState(false);
  const [error, setError] = useState(null);
  const streamRef = useRef(null);

  const startCamera = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ 
        video: { 
          width: { ideal: 1280 },
          height: { ideal: 720 },
          facingMode: 'user'
        },
        audio: false 
      });
      
      streamRef.current = stream;
      if (videoRef.current) {
        videoRef.current.srcObject = stream;
      }
      setIsStreaming(true);
      setError(null);
    } catch (err) {
      console.error("Error accessing camera:", err);
      setError("Unable to access camera. Please grant camera permissions.");
    }
  };

  const stopCamera = () => {
    if (streamRef.current) {
      streamRef.current.getTracks().forEach(track => track.stop());
      streamRef.current = null;
    }
    if (videoRef.current) {
      videoRef.current.srcObject = null;
    }
    setIsStreaming(false);
  };

  useEffect(() => {
    return () => {
      stopCamera();
    };
  }, []);

  const drawDetectionOverlay = () => {
    if (!detectionResult || !canvasRef.current || !videoRef.current) return;

    const canvas = canvasRef.current;
    const video = videoRef.current;
    const ctx = canvas.getContext('2d');

    canvas.width = video.videoWidth;
    canvas.height = video.videoHeight;

    ctx.clearRect(0, 0, canvas.width, canvas.height);

    // Draw detection status overlay
    const hasViolation = detectionResult.missing_equipment?.length > 0;
    
    // Status indicator
    ctx.fillStyle = hasViolation ? 'rgba(239, 68, 68, 0.2)' : 'rgba(34, 197, 94, 0.2)';
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    // Status text
    ctx.font = 'bold 48px Arial';
    ctx.fillStyle = hasViolation ? '#ef4444' : '#22c55e';
    ctx.textAlign = 'center';
    ctx.fillText(
      hasViolation ? '⚠ PPE VIOLATION' : '✓ PPE COMPLIANT',
      canvas.width / 2,
      80
    );

    // Equipment status
    const equipment = [
      { name: 'Helmet', status: !detectionResult.missing_equipment?.includes('helmet') },
      { name: 'Gloves', status: !detectionResult.missing_equipment?.includes('gloves') },
      { name: 'Safety Vest', status: !detectionResult.missing_equipment?.includes('safety_vest') }
    ];

    ctx.font = 'bold 32px Arial';
    ctx.textAlign = 'left';
    equipment.forEach((item, index) => {
      const y = canvas.height - 120 + (index * 40);
      ctx.fillStyle = item.status ? '#22c55e' : '#ef4444';
      ctx.fillText(`${item.status ? '✓' : '✗'} ${item.name}`, 40, y);
    });

    // Location
    if (cameraLocation) {
      ctx.font = 'bold 24px Arial';
      ctx.fillStyle = '#fff';
      ctx.textAlign = 'right';
      ctx.fillText(`Location: ${cameraLocation}`, canvas.width - 40, 40);
    }
  };

  useEffect(() => {
    drawDetectionOverlay();
  }, [detectionResult]);

  return (
    <Card className="overflow-hidden">
      <div className="relative bg-gray-900">
        {error && (
          <Alert variant="destructive" className="m-4">
            <AlertTriangle className="h-4 w-4" />
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        <div className="relative aspect-video">
          <video
            ref={videoRef}
            autoPlay
            playsInline
            muted
            className="w-full h-full object-cover"
          />
          <canvas
            ref={canvasRef}
            className="absolute inset-0 w-full h-full pointer-events-none"
          />

          {!isStreaming && (
            <div className="absolute inset-0 flex items-center justify-center bg-gray-800">
              <div className="text-center">
                <CameraOff className="w-16 h-16 mx-auto mb-4 text-gray-400" />
                <p className="text-gray-400 mb-4">Camera is off</p>
                <Button onClick={startCamera} size="lg" className="bg-orange-600 hover:bg-orange-700">
                  <Camera className="w-5 h-5 mr-2" />
                  Start Camera
                </Button>
              </div>
            </div>
          )}

          {isDetecting && isStreaming && (
            <div className="absolute top-4 right-4 bg-blue-600 text-white px-4 py-2 rounded-lg flex items-center gap-2 animate-pulse">
              <div className="w-2 h-2 bg-white rounded-full animate-ping" />
              Analyzing...
            </div>
          )}
        </div>

        {isStreaming && (
          <div className="p-4 bg-gray-800 flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="w-3 h-3 bg-red-500 rounded-full animate-pulse" />
              <span className="text-white font-medium">LIVE</span>
              {detectionResult && (
                <div className="flex items-center gap-2 ml-4">
                  {detectionResult.missing_equipment?.length > 0 ? (
                    <>
                      <AlertTriangle className="w-5 h-5 text-red-500" />
                      <span className="text-red-500 font-semibold">
                        {detectionResult.missing_equipment.length} Violation{detectionResult.missing_equipment.length > 1 ? 's' : ''}
                      </span>
                    </>
                  ) : (
                    <>
                      <CheckCircle className="w-5 h-5 text-green-500" />
                      <span className="text-green-500 font-semibold">All Clear</span>
                    </>
                  )}
                </div>
              )}
            </div>
            <Button 
              onClick={stopCamera} 
              variant="outline" 
              size="sm"
              className="text-white border-gray-600 hover:bg-gray-700"
            >
              <VideoOff className="w-4 h-4 mr-2" />
              Stop Camera
            </Button>
          </div>
        )}
      </div>
    </Card>
  );
}
